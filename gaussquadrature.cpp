#include "gaussquadrature.h"
#include <iostream>

GaussQuadrature::GaussQuadrature()
{

    roots[1] = {0.};
    weights[1] = {2.};
    roots[2] = {-0.57735, 0.57735};
    weights[2] = {1., 1.};
    roots[3] = {0., -0.774597, 0.774597};
    weights[3] = {0.888889, 0.555556, 0.555556};
    roots[4] = {-0.339981, 0.339981, -0.861136, 0.861136};
    weights[4] = {0.652145, 0.652145, 0.347855, 0.347855};
    roots[5] = {0., -0.538469, 0.538469, -0.90618, 0.90618};
    weights[5] = {0.568889, 0.478629, 0.478629, 0.236927, 0.236927};
    roots[6] = {-0.238619, 0.238619, -0.661209, 0.661209, -0.93247, 0.93247};
    weights[6] = {0.467914, 0.467914, 0.360762, 0.360762, 0.171324, 0.171324};
    roots[7] = {0., -0.405845, 0.405845, -0.741531, 0.741531, -0.949108, 0.949108};
    weights[7] = {0.417959, 0.38183, 0.38183, 0.279705, 0.279705, 0.129485, 0.129485};
    roots[8] = {-0.183435, 0.183435, -0.525532, 0.525532, -0.796666, 0.796666, -0.96029, 0.96029};
    weights[8] = {0.362684, 0.362684, 0.313707, 0.313707, 0.222381, 0.222381, 0.101229, 0.101229};
    roots[9] = {0., -0.324253, 0.324253, -0.613371, 0.613371, -0.836031, 0.836031, -0.96816, 0.96816};
    weights[9] = {0.330239, 0.312347, 0.312347, 0.260611, 0.260611, 0.180648, 0.180648, 0.0812744, 0.0812744};
    roots[10] = {-0.148874, 0.148874, -0.433395, 0.433395, -0.67941, 0.67941, -0.865063, 0.865063, -0.973907, 0.973907};
    weights[10] = {0.295524, 0.295524, 0.269267, 0.269267, 0.219086, 0.219086, 0.149451, 0.149451, 0.0666713, 0.0666713};
    roots[11] = {0., -0.269543, 0.269543, -0.519096, 0.519096, -0.730152, 0.730152, -0.887063, 0.887063, -0.978229, 0.978229};
    weights[11] = {0.272925, 0.262805, 0.262805, 0.233194, 0.233194, 0.18629, 0.18629, 0.12558, 0.12558, 0.0556686, 0.0556686};
    roots[12] = {-0.125233, 0.125233, -0.367831, 0.367831, -0.587318, 0.587318, -0.769903, 0.769903, -0.904117, 0.904117, -0.981561, 0.981561};
    weights[12] = {0.249147, 0.249147, 0.233493, 0.233493, 0.203167, 0.203167, 0.160078, 0.160078, 0.106939, 0.106939, 0.0471753, 0.0471753};
    roots[13] = {0., -0.230458, 0.230458, -0.448493, 0.448493, -0.642349, 0.642349, -0.801578, 0.801578, -0.917598, 0.917598, -0.984183, 0.984183};
    weights[13] = {0.232552, 0.226283, 0.226283, 0.207816, 0.207816, 0.178146, 0.178146, 0.138874, 0.138874, 0.0921215, 0.0921215, 0.040484, 0.040484};
    roots[14] = {-0.108055, 0.108055, -0.319112, 0.319112, -0.515249, 0.515249, -0.687293, 0.687293, -0.827201, 0.827201, -0.928435, 0.928435, -0.986284, 0.986284};
    weights[14] = {0.215264, 0.215264, 0.205198, 0.205198, 0.185538, 0.185538, 0.157203, 0.157203, 0.121519, 0.121519, 0.0801581, 0.0801581, 0.0351195, 0.0351195};
    roots[15] = {0., -0.201194, 0.201194, -0.394151, 0.394151, -0.570972, 0.570972, -0.724418, 0.724418, -0.848207, 0.848207, -0.937273, 0.937273, -0.987993, 0.987993};
    weights[15] = {0.202578, 0.198431, 0.198431, 0.186161, 0.186161, 0.166269, 0.166269, 0.139571, 0.139571, 0.107159, 0.107159, 0.070366, 0.070366, 0.0307532, 0.0307532};
    roots[16] = {-0.0950125, 0.0950125, -0.281604, 0.281604, -0.458017, 0.458017, -0.617876, 0.617876, -0.755404, 0.755404, -0.865631, 0.865631, -0.944575, 0.944575, -0.989401, 0.989401};
    weights[16] = {0.189451, 0.189451, 0.182603, 0.182603, 0.169157, 0.169157, 0.149596, 0.149596, 0.124629, 0.124629, 0.0951585, 0.0951585, 0.0622535, 0.0622535, 0.0271525, 0.0271525};
    roots[17] = {0., -0.178484, 0.178484, -0.351232, 0.351232, -0.512691, 0.512691, -0.657671, 0.657671, -0.781514, 0.781514, -0.880239, 0.880239, -0.950676, 0.950676, -0.990575, 0.990575};
    weights[17] = {0.179446, 0.176563, 0.176563, 0.168004, 0.168004, 0.154046, 0.154046, 0.135136, 0.135136, 0.111884, 0.111884, 0.0850361, 0.0850361, 0.0554595, 0.0554595, 0.0241483, 0.0241483};
    roots[18] = {-0.084775, 0.084775, -0.251886, 0.251886, -0.411751, 0.411751, -0.559771, 0.559771, -0.691687, 0.691687, -0.803705, 0.803705, -0.892602, 0.892602, -0.955824, 0.955824, -0.991565, 0.991565};
    weights[18] = {0.169142, 0.169142, 0.164276, 0.164276, 0.154685, 0.154685, 0.140643, 0.140643, 0.122555, 0.122555, 0.100942, 0.100942, 0.0764257, 0.0764257, 0.0497145, 0.0497145, 0.021616, 0.021616};
    roots[19] = {0., -0.160359, 0.160359, -0.316564, 0.316564, -0.464571, 0.464571, -0.600545, 0.600545, -0.720966, 0.720966, -0.822715, 0.822715, -0.903156, 0.903156, -0.960208, 0.960208, -0.992407, 0.992407};
    weights[19] = {0.161054, 0.158969, 0.158969, 0.152766, 0.152766, 0.142607, 0.142607, 0.128754, 0.128754, 0.111567, 0.111567, 0.09149, 0.09149, 0.0690445, 0.0690445, 0.0448142, 0.0448142, 0.0194618, 0.0194618};
    roots[20] = {-0.0765265, 0.0765265, -0.227786, 0.227786, -0.373706, 0.373706, -0.510867, 0.510867, -0.636054, 0.636054, -0.746332, 0.746332, -0.839117, 0.839117, -0.912234, 0.912234, -0.963972, 0.963972, -0.993129, 0.993129};
    weights[20] = {0.152753, 0.152753, 0.149173, 0.149173, 0.142096, 0.142096, 0.131689, 0.131689, 0.118195, 0.118195, 0.10193, 0.10193, 0.0832767, 0.0832767, 0.062672, 0.062672, 0.0406014, 0.0406014, 0.017614, 0.017614};



}


double GaussQuadrature::integrate(double a, double b, std::function<double(double)> f, size_t n){
    if(n==0){
        throw(std::invalid_argument("Number of integration points must be positive"));
    }
    if(n>20){
        throw(std::invalid_argument("Number of integration points larger than 20 not implemented"));
    }

    double sum = 0;

    for(size_t k=0; k<n; k++){
        double point = (a+b)/2 + (b-a)*roots[n][k]/2;
        sum += weights[n][k]*f(point);
    }

    return sum*(b-a)/2;
}

double gauss_legendre_integrate(std::function<double(double)> f){
    GaussQuadrature integrator;
    double integral = 0;
    double interval=1.;
    double a=0, b=interval;

    for(size_t k=0; k<8; k++, a+=interval, interval*=2, b+=interval){
        double contribution = integrator.integrate(a, b, f, 10);
        integral += contribution;
        if(std::abs(integral) > 1e-3 && std::abs(contribution/integral)<1e-3){
            break;
        }
    }

    return integral;
}
